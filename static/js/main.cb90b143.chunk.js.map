{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","constants.js","loader.svg","containers/App.js","actions.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","cardComponent","robots","map","user","SearchBox","searchChange","arial-laver","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","log","setState","Component","Header","React","memo","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","dispatch","useDispatch","searchField","useSelector","searchRobots","requestRobots","isPending","onRequestRobots","fetch","then","response","json","data","payload","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","event","text","target","value","class","loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb90b143.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-S'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user) => {\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t\tid={user.id}\r\n\t\t\t\tkey={user.id}\r\n\t\t\t\tname={user.name}\r\n\t\t\t\temail={user.email}\r\n\t\t\t\t/>\r\n\t\t);\r\n\t})\r\n\treturn (\r\n\t\t<>\r\n\t    {cardComponent}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tarial-laver=\"Search Robots\"\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.props.log({ error, info })\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Header = React.memo((props) => {\r\n\treturn <h1 className='f1'>RoboFriends</h1>\r\n});\r\n\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","export default __webpack_public_path__ + \"static/media/loader.4496180b.svg\";","import React, { useEffect } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport Header from '../components/Header.js';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSearchField, requestRobots } from '../actions'\r\nimport './App.css';\r\nimport loader from '../loader.svg';\r\n\r\nfunction App() {\r\n\r\n\tconst dispatch = useDispatch() \r\n  const { searchField } = useSelector(\r\n    (state) => state.searchRobots\r\n\t)\r\n\r\n\tconst { robots, isPending, error } = useSelector(\r\n    (state) => state.requestRobots\r\n\t)\r\n\r\n\tconst onRequestRobots = () => {\r\n    dispatch(requestRobots())\r\n \t}\r\n\r\n\tconst onSearchChange = (event) => {\r\n\t\tdispatch(setSearchField(event.target.value))\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tonRequestRobots()\r\n\t}, []);\r\n\r\n\tconst filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\r\n\treturn (\r\n    <div className='tc'>\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange}/>\r\n      <Scroll>\r\n        { \r\n        \tisPending \r\n        \t?\r\n    \t    <>\r\n    \t    \t<h1 class=\"header\">Loading...</h1>\r\n   \t \t\t\t\t<img class=\"loader\" src={loader} alt=\"Loading\"/>\r\n\t\t\t\t\t</>\r\n        \t:\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        }\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots, requestRobots } from './reducers.js'\r\nimport * as serviceWorker from './serviceWorkerRegistration.js'\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    \t<App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}